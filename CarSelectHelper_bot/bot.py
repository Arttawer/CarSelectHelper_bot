import os
import sys

import telegram
from telegram.ext import Updater, CommandHandler, ConversationHandler, RegexHandler, MessageHandler, Filters

from car import Car
from menu import *


class Bot:

    def __init__(self):
        self.cars = []
        self.handlers = []
        self.token = open('token.txt', 'r').readline().strip()
        self.filtered_cars = []

        self.updater = Updater(token=self.token, use_context=True)
        self.dispatcher = self.updater.dispatcher

        self.read_cars_db('cars.csv')
        self.set_handlers()
        self.register_handlers()

    def read_cars_db(self, db_file):
        cars_db = open(db_file, 'r').readlines()

        for i in cars_db[1:]:
            self.cars.append(Car(*i.strip().split(',')))

    def print_cars(self):
        for i in self.cars:
            print(i)

    def register_handlers(self):
        for handler in self.handlers:
            self.dispatcher.add_handler(handler)

    def set_handlers(self):
        self.handlers = [
            CommandHandler('start', self.start),
            ConversationHandler(
                entry_points=[MessageHandler(Filters.regex('^–ù–∞–π—Ç–∏ –º–∞—à–∏–Ω—É$'), self.start_finding_car)],
                states={
                    0: [MessageHandler(Filters.text, self.register_carcass)],
                    1: [MessageHandler(Filters.text, self.register_consumption)],
                    2: [MessageHandler(Filters.text, self.register_min_cost)],
                    3: [MessageHandler(Filters.text, self.register_max_cost)]
                },
                fallbacks=[CommandHandler('cancel', self.cancel)]
            )
        ]

    def start(self, update, context):
        context.bot.send_message(chat_id=update.message.chat_id,
                                 text="üëã –ü—Ä–∏–≤–µ—Ç!\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å –º–∞—à–∏–Ω—É –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.\nüëâ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∂–º–∏ "
                                      "'–ù–∞–π—Ç–∏ –º–∞—à–∏–Ω—É'",
                                 reply_markup=main_menu)

    def start_finding_car(self, update, context):
        self.filtered_cars = self.cars
        context.bot.send_message(chat_id=update.message.chat_id,
                                 text="üöô –í—ã–±–µ—Ä–∏ —Ç–∏–ø –∫—É–∑–æ–≤–∞" + '\n' +
                                      "1. –°–µ–¥–∞–Ω" + '\n' +
                                      "2. –ö—É–ø—ç" + '\n' +
                                      "3. –£–Ω–∏–≤–µ—Ä—Å–∞–ª" + '\n' +
                                      "4. –í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫" + '\n' +
                                      "5. –•—ç—Ç—á–±–µ–∫" + '\n' +
                                      "6. –ö–∞–±—Ä–∏–æ–ª–µ—Ç" + '\n' +
                                      "7. –ú–∏–Ω–∏–≤—ç–Ω" + '\n',
                                 reply_markup=carcass_menu)
        context.bot.send_photo(chat_id=update.message.chat_id,
                               photo=open('kuzovva.jpg', 'rb'))
        return 0

    def register_carcass(self, update, context):
        def next_text():
            return "‚õΩ –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å —Ä–∞—Å—Ö–æ–¥–æ–º –Ω–∞ 100 –∫–º:\n" \
                   "1. –î–æ 8 –ª\n" \
                   "2. –î–æ 10 –ª\n" \
                   "3. –î–æ 13 –ª\n" \
                   "4. –î–æ 15 –ª\n" \
                   "5. –ë–æ–ª—å—à–µ 15\n"

        carcass = update.message.text.strip()
        if carcass in Car.possible_carcass:
            context.bot.send_message(chat_id=update.message.chat_id,
                                     text="–ü—Ä–∏–Ω—è—Ç–æ, —Ö–æ—Ä–æ—à–∏–π –∫—É–∑–æ–≤\n" + next_text(),
                                     reply_markup=consumption_menu
                                     )
            self.filtered_cars = list(filter(lambda x: x.carcass == carcass, self.filtered_cars))
            # print(list(self.filtered_cars))
            return 1
        elif carcass == '–ù–µ –≤–∞–∂–Ω–æ':
            context.bot.send_message(chat_id=update.message.chat_id,
                                     text="–Ø—Å–Ω–æ, –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ\n" + next_text(),
                                     reply_markup=consumption_menu
                                     )
            return 1
        else:
            context.bot.send_message(chat_id=update.message.chat_id,
                                     text="–í –º–æ–µ–π –±–∞–∑–µ —Ç–∞–∫–æ–≥–æ –∫—É–∑–æ–≤–∞ –Ω–µ—Ç.\n–ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π")
            return 0

    def register_consumption(self, update, context):
        def next_text():
            return "–¢–∞–∫ –∏ –∑–∞–ø–∏—à—É\n" \
                   "üíµ –î–∞–ª—å—à–µ - –ª—É—á—à–µ, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:\n" \
                   '1. –æ—Ç 800 —Ç.—Ä\n' \
                   '2. –æ—Ç 1 –º–ª–Ω. —Ä\n' \
                   '3. –æ—Ç 1,5 –º–ª–Ω. —Ä\n' \
                   '4. –æ—Ç 2 –º–ª–Ω. —Ä\n' \
                   '5. –æ—Ç 3 –º–ª–Ω. —Ä\n' \
                   '6. –æ—Ç 4 –º–ª–Ω. —Ä\n' \
                   '–ù–µ –≤–∞–∂–Ω–æ'

        cons = update.message.text.strip()
        if cons == '–ù–µ –≤–∞–∂–Ω–æ':
            context.bot.send_message(chat_id=update.message.chat_id,
                                     text='–ù—É –æ–∫\n' + next_text(),
                                     reply_markup=min_cost_menu)
            return 2
        else:
            num = float(cons.split(' ')[-2])
            # print(num)
            if '–î–æ' in cons:
                self.filtered_cars = list(filter(lambda x: x.consumption <= num, self.filtered_cars))
            else:
                self.filtered_cars = list(filter(lambda x: x.consumption > num, self.filtered_cars))
            # print(self.filtered_cars)
            context.bot.send_message(chat_id=update.message.chat_id,
                                     text='–ê —Ç—ã, —è —Å–º–æ—Ç—Ä—é, —à–∞—Ä–∏—à—å\n' + next_text(),
                                     reply_markup=min_cost_menu)
            return 2

    def register_min_cost(self, update, context):
        def next_text():
            return "üíµüíµ –î–∞–ª—å—à–µ - –µ—â–µ –ª—É—á—à–µ, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:\n" \
                   '1. –¥–æ 1 –º–ª–Ω. —Ä\n' \
                   '2. –¥–æ 1,5 –º–ª–Ω. —Ä\n' \
                   '3. –¥–æ 2 –º–ª–Ω. —Ä\n' \
                   '4. –¥–æ 3 –º–ª–Ω. —Ä\n' \
                   '5. –¥–æ 4 –º–ª–Ω. —Ä\n' \
                   '6. –ù–µ –≤–∞–∂–Ω–æ\n'

        if '—Ä' in update.message.text:
            min_cost = float(update.message.text.split(' ')[1])
            self.filtered_cars = list(filter(lambda x: x.cost >= min_cost * 1000000, self.filtered_cars))
            context.bot.send_message(chat_id=update.message.chat_id,
                                     text="–£—á–µ–ª\n" + next_text(),
                                     reply_markup=max_cost_menu)
        else:
            context.bot.send_message(chat_id=update.message.chat_id,
                                     text="–õ–∞–¥—É—à–∫–∏\n" + next_text(),
                                     reply_markup=max_cost_menu)
        return 3

    def register_max_cost(self, update, context):
        if '—Ä' in update.message.text:
            max_cost = float(update.message.text.split(' ')[1])
            self.filtered_cars = list(filter(lambda x: x.cost <= max_cost * 1000000, self.filtered_cars))
        context.bot.send_message(chat_id=update.message.chat_id,
                                 text='üîé –û–∫–µ–π, —è —Å–æ–±—Ä–∞–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, —á—Ç–æ –º–æ–∂–µ—Ç –ø–æ–¥–æ–π—Ç–∏ –∏–º–µ–Ω–Ω–æ '
                                      '—Ç–µ–±–µ, —Å–º–æ—Ç—Ä–∏:')
        context.bot.send_message(chat_id=update.message.chat_id,
                                 text=self.get_results(),
                                 reply_markup=main_menu,
                                 parse_mode=telegram.ParseMode.HTML)
        return ConversationHandler.END

    def get_results(self):
        final_text = [
            f'üöó <b>{car.manufacturer} {car.model}</b>:\n‚Ä¢–†–∞—Å—Ö–æ–¥ –Ω–∞ 100 –∫–º (–ª): {car.consumption}\n‚Ä¢–¶–µ–Ω–∞: {car.cost}\n' +
            f'‚Ä¢–ö–æ—Ä–ø—É—Å: {car.carcass}' for car in self.filtered_cars]
        self.filtered_cars = self.cars
        if final_text:
            return '\n'.join(final_text)
        else:
            return 'üòû –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–∞—à–∏–Ω —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –Ω–µ—Ç —É –Ω–∞—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –¥—Ä—É–≥—É—é –º–∞—à–∏–Ω—É'

    def cancel(self, upd, context):
        self.filtered_cars = self.cars
        context.bot.send_message(chat_id=upd.message.chat_id,
                                 text="–ö–∞–∫ —Å–∫–∞–∂–µ—à—å, –Ω–∞—á–∞–ª—å–Ω–∏–∫",
                                 reply_markup=main_menu)
        return ConversationHandler.END

    def restart_program(self):
        """Restarts the current program, with file objects and descriptors
           cleanup
        """
        print("Restarted")
        python = sys.executable
        os.execl(python, python, *sys.argv)

    def main(self):
        self.updater.start_polling()
